<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    namespace：指定接口类是哪个
-->
<mapper namespace="com.example.mapper.UserMapper">


    <!--
        id:指定接口类里对应的方法
        resultType:指定返回的值封装到哪里
    -->

    <select id="findUserXml" resultType="com.example.entity.User">
        select id, name, pwd from user;
    </select>

    <!--
        parameterType:指定参数类
        在yml配置type-aliases-package: com.example.entity就可以不写全名

            selectKey:自增长是保存后获取id
                       order: 表示selectKey的语句在主体语句之间还是之后执行
    -->
    <insert id="saveUserXml" parameterType="com.example.entity.User">
          <selectKey keyProperty="id" keyColumn="id" resultType="Long" order="AFTER">
              select last_insert_id();
          </selectKey>

          insert into user (id, name, pwd) values (#{id}, #{name}, #{pwd});
    </insert>

    <update id="updateUserXml" parameterType="com.example.entity.User">
        update user set name = #{name}, pwd = #{pwd} where id = #{id};
    </update>

    <!--
        parameterType:普通类型的参数可以写全名也可以不写全名
        全名：java.lang.Long
        简写：Long
    -->
    <delete id="deleteUserXml" parameterType="java.lang.Long">
        delete from user where id = #{xx};
    </delete>


    <select id="findByIdXml" parameterType="Long" resultType="com.example.entity.User">
        select * from user where id = #{xx};
    </select>


    <select id="findByName" parameterType="String" resultType="com.example.entity.User">
        select * from user where name like #{xx};
    </select>


    <select id="countUserXml" resultType="Integer">
        select count(id) from user;
    </select>


    <!--
        封装成类属性的类参数参使用导航调用
    -->
    <select id="findByQueryFormIdXml" parameterType="com.example.form.QueryForm" resultType="com.example.entity.User">
        select * from user where id = #{user.id};
    </select>


</mapper>
